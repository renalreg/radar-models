name: Pull Request

on:
  push:
    branches-ignore:
      - main

  workflow_dispatch:

jobs:
  open-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.REG_APP_ID }}
          private_key: ${{ secrets.REG_APP_KEY }}

      - name: Git Setup
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Committer Email
        id: committer_email
        run: |
          COMMITTER_EMAIL=$(git log -n 1 --pretty=format:%ae)
          echo "committer_email=${COMMITTER_EMAIL}" >> $GITHUB_OUTPUT

      - name: Extract Branch Name
        id: extract_branch_name
        run: |
          BRANCH_NAME=$(basename ${{ github.event.ref }})
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: PR Title
        id: pr_title
        run: |
          COMMIT_MESSAGES=$(git log remotes/origin/main..${{ steps.extract_branch_name.outputs.branch_name }} --oneline --pretty=format:"%s" | grep -E '^(feat!|feat|fix|docs)')

          SUPERIOR_COMMIT=$(echo "$COMMIT_MESSAGES" | grep -E '^(feat!)' | sort -r | head -n 1)

          if [ -z "$SUPERIOR_COMMIT" ]; then
              SUPERIOR_COMMIT=$(echo "$COMMIT_MESSAGES" | grep -E '^(feat)' | sort -r | head -n 1)
          fi

          if [ -z "$SUPERIOR_COMMIT" ]; then
              SUPERIOR_COMMIT=$(echo "$COMMIT_MESSAGES" | grep -E '^(fix)' | sort -r | head -n 1)
          fi

          if [ -z "$SUPERIOR_COMMIT" ]; then
              SUPERIOR_COMMIT=$(echo "$COMMIT_MESSAGES" | grep -E '^(docs)' | sort -r | head -n 1)
          fi

          COUNT_SUPERIOR=$(echo "$COMMIT_MESSAGES" | grep -c "$SUPERIOR_COMMIT")

          if [ "${COUNT_SUPERIOR}" -gt 1 ]; then
              echo "Exiting workflow. Two or more instances of the greatest commit found."
              exit 0
          fi

          echo "pr_title=${SUPERIOR_COMMIT}" >> $GITHUB_OUTPUT

      - name: PR Features
        id: pr_features
        run: |
          FEATURE_COMMITS=$(git log remotes/origin/main..${{ steps.extract_branch_name.outputs.branch_name }} --oneline --pretty=format:"%s" | grep -E '^(feat!(:|\([^)]*\))|feat(:|\([^)]*\))|fix(:|\([^)]*\))|docs(:|\([^)]*\)))' | awk '{printf "%s\\n", $0}')
          {
            echo 'pr_features<<EOF'
            echo "${FEATURE_COMMITS}"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: PR Notes
        id: pr_notes
        run: |
          COMMIT_BODIES=$(git log remotes/origin/main..${{ steps.extract_branch_name.outputs.branch_name }} --pretty=format:"%s%n%b" | awk '/^(feat!|feat|fix|docs)/ {inBody=1; next} inBody {print $0; next} {inBody=0}' | awk '{printf "%s\\n", $0}')
          {
            echo 'pr_notes<<EOF'
            echo "${COMMIT_BODIES}"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Get Current Date
        id: get_current_date
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")
          echo "current_date=${CURRENT_DATE}" >> $GITHUB_OUTPUT

      - name: Render Template
        id: template
        uses: chuhlomin/render-template@v1
        with:
          template: .github/pull_request_template.md
          vars: |
            pr_date: ${{ steps.get_current_date.outputs.current_date }}
            pr_feature: "${{ steps.pr_features.outputs.pr_features }}"
            pr_notes: "${{ steps.pr_notes.outputs.pr_notes }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: ${{ github.event.ref }}
          commit-message: ${{ steps.pr_title.outputs.pr_title }}
          title: ${{ steps.pr_title.outputs.pr_title }}
          body: ${{ steps.template.outputs.result }}
          base: main
